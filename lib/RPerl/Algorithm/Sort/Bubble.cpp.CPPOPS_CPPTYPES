// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble
#define __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble 0.004_030

// [[[ INCLUDES ]]]
#include <RPerl/Algorithm/Sort/Bubble.h>

# ifdef __PERL__TYPES

Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO METHODS & SUBROUTINES ]]]

void RPerl__Algorithm__Sort__Bubble::integer_sort() {
    this->integer_data = integer_bubblesort(this->integer_data);
}

void RPerl__Algorithm__Sort__Bubble::number_sort() {
    this->number_data = number_bubblesort(this->number_data);
}

void RPerl__Algorithm__Sort__Bubble::inherited__Bubble(string person) {
    cout << "in CPPOPS_CPPTYPES Bubble->inherited__Bubble(), received this = '" << this << "' and person = '" << person << "', FRIED\n";
}

void RPerl__Algorithm__Sort__Bubble::inherited(string person) {
    cout << "in CPPOPS_CPPTYPES Bubble->inherited(), received this = '" << this << "' and person = '" << person << "', ILLOGICAL\n";
}

integer_arrayref integer_bubblesort(integer_arrayref integer_data) {
    integer is_sorted = 0;
    integer i;
    integer integer_data_length = integer_data.size();
    integer integer_data_i = -9999;
    integer integer_data_i_plus_1 = -9999;
    integer swap = -9999;
    while (not(is_sorted)) {
        is_sorted = 1;
        for (i = 0; i < (integer_data_length - 1); i++) {
            integer_data_i = integer_data[i];
            integer_data_i_plus_1 = integer_data[(i + 1)];

            if (integer_data_i > integer_data_i_plus_1) {
                is_sorted = 0;
                swap = integer_data_i;
                integer_data[i] = integer_data_i_plus_1;
                integer_data[(i + 1)] = swap;
            }
        }
    }

    return(integer_data);
}

number_arrayref number_bubblesort(number_arrayref number_data) {
    integer is_sorted = 0;
    integer i;
    integer number_data_length = number_data.size();
    number number_data_i = -9999;
    number number_data_i_plus_1 = -9999;
    number swap = -9999;
    while (not(is_sorted)) {
        is_sorted = 1;
        for (i = 0; i < (number_data_length - 1); i++) {
            number_data_i = number_data[i];
            number_data_i_plus_1 = number_data[(i + 1)];
            if (number_data_i > number_data_i_plus_1) {
                is_sorted = 0;
                swap = number_data_i;
                number_data[i] = number_data_i_plus_1;
                number_data[(i + 1)] = swap;
            }
        }
    }
    return(number_data);
}

string uninherited__Bubble(string person) {
    cout << "in CPPOPS_CPPTYPES Bubble::uninherited__Bubble(), received person = '" << person << "', MITOCHONDRIAL\n"; return((string)"Bubble::uninherited__Bubble() RULES! CPPOPS_CPPTYPES");
}

string uninherited(string person) {
    cout << "in CPPOPS_CPPTYPES Bubble::uninherited(), received person = '" << person << "', TETRAHEDRON\n"; return((string)"Bubble::uninherited() ROCKS! CPPOPS_CPPTYPES");
}

string integer_bubblesort__typetest0(integer_arrayref lucky_integers) {
    return(integer_arrayref_to_string(integer_bubblesort(lucky_integers)) + "CPPOPS_CPPTYPES");
}

string number_bubblesort__typetest0(number_arrayref lucky_numbers) {
    return(number_arrayref_to_string(number_bubblesort(lucky_numbers)) + "CPPOPS_CPPTYPES");
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!

# endif

#endif
