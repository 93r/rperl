// [[[ HEADER ]]]
using std::cout;  using std::cerr;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_h
#define __CPP__INCLUDED__RPerl__Algorithm__Sort__Bubble_h 0.005_000

// [[[ INCLUDES ]]]
#include <rperltypes_mode.h>  // for default definitions of __PERL__TYPES or __CPP__TYPES
#include <rperltypes.h>  // for data types and structures
#include <RPerl/HelperFunctions.cpp>  // -> HelperFunctions.h
#include <RPerl/Algorithm/Sort.cpp>

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class RPerl__Algorithm__Sort__Bubble : public RPerl__Algorithm__Sort {
public:
// [[[ OO METHODS ]]]
    void integer_sort();
    void number_sort();

    // OO INHERITANCE TESTING
    void inherited__Bubble(SV* person);
    void inherited(SV* person);

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    SV* get_integer_data() { return SvREFCNT_inc(this->integer_data); }
    void set_integer_data(SV* integer_data_new) { this->integer_data = integer_data_new; }
    SV* get_number_data() { return SvREFCNT_inc(this->number_data); }
    void set_number_data(SV* number_data_new) { this->number_data = number_data_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Sort__Bubble() {}
    ~RPerl__Algorithm__Sort__Bubble() {}

    // <<< CLASS NAME REPORTER >>>
    virtual SV* myclassname() { return newSVpv("RPerl::Algorithm::Sort::Bubble", 0); }
 
private:
// [[[ OO PROPERTIES ]]]
    SV* integer_data;
    SV* number_data;
};

// [[[ SUBROUTINES ]]]

SV* integer_bubblesort(SV* integer_data);
SV* number_bubblesort(SV* number_data);
SV* uninherited__Bubble(SV* person);
SV* uninherited(SV* person);
SV* integer_bubblesort__typetest0(SV* lucky_integers);
SV* number_bubblesort__typetest0(SV* lucky_numbers);

// <<< OPERATIONS & DATA TYPES REPORTER >>>
SV* RPerl__Algorithm__Sort__Bubble__MODE_ID() { return newSViv(1); }  // CPPOPS_PERLTYPES is 1

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ OO INHERITANCE ]]]
class RPerl__Algorithm__Sort__Bubble : public RPerl__Algorithm__Sort {  // SINGLE OO INHERITANCE
public:
// [[[ OO METHODS ]]]
    void integer_sort();
    void number_sort();
    void inherited__Bubble(string person);
    void inherited(string person);

    // <<< OO PROPERTIES, ACCESSORS & MUTATORS >>>
    integer_arrayref get_integer_data() { return this->integer_data; }
    void set_integer_data(integer_arrayref integer_data_new) { this->integer_data = integer_data_new; }
    number_arrayref get_number_data() { return this->number_data; }
    void set_number_data(number_arrayref number_data_new) { this->number_data = number_data_new; }

    // <<< CONSTRUCTOR & DESTRUCTOR >>>
    RPerl__Algorithm__Sort__Bubble() {}
    ~RPerl__Algorithm__Sort__Bubble() {}

    // <<< CLASS NAME REPORTER >>>
    virtual string myclassname() { return (const string) "RPerl::Algorithm::Sort::Bubble"; }

private:
// [[[ OO PROPERTIES ]]]
    integer_arrayref integer_data;
    number_arrayref number_data;
};

// [[[ SUBROUTINES ]]]

integer_arrayref integer_bubblesort(integer_arrayref integer_data);
number_arrayref number_bubblesort(number_arrayref number_data);
string uninherited__Bubble(string person);
string uninherited(string person);
string integer_bubblesort__typetest0(integer_arrayref lucky_integers);
string number_bubblesort__typetest0(number_arrayref lucky_numbers);

// <<< OPERATIONS & DATA TYPES REPORTER >>>
integer RPerl__Algorithm__Sort__Bubble__MODE_ID() { return 2; }  // CPPOPS_CPPTYPES is 2

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_exactly_one!

# endif

#endif
