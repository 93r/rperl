# [[[ HEADER ]]]
package RPerl::Algorithm::Math::GeometricAlgebra;
use strict;
use warnings;
use RPerl::AfterSubclass;

our $VERSION = 0.000_100;

# [[[ OO INHERITANCE ]]]
use parent qw(RPerl::Algorithm::Math);
use RPerl::Algorithm::Math;

# [[[ CRITICS ]]]
## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)
## no critic qw(RequireInterpolationOfMetachars)

# [[[ OO PROPERTIES ]]]
our hashref $properties = {};

# [[[ OO METHODS & SUBROUTINES ]]]
our number $inner_product__vector_vector_euclidean = sub {
    ( my number_arrayref $input_vector_1, my number_arrayref $input_vector_2 ) = @_;
    if ( ( scalar @{$input_vector_1} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector_1 is not of length 4, croaking');
    }
    if ( ( scalar @{$input_vector_2} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector_2 is not of length 4, croaking');
    }
    my number $return_value_number = 0.0;
    for my integer $i ( 1 .. 3 ) {
        $return_value_number = $return_value_number + ( $input_vector_1->[$i] * $input_vector_2->[$i] );
    }
    return $return_value_number;
};

our number_arrayref $inner_product__bivector_vector_euclidean = sub {
    ( my number_arrayref $input_bivector, my number_arrayref $input_vector ) = @_;
    if ( ( scalar @{$input_bivector} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_bivector is not of length 4, croaking');
    }
    if ( ( scalar @{$input_vector} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector is not of length 4, croaking');
    }
    my number_arrayref $return_value_vector = [];
    $return_value_vector->[1] = ( $input_bivector->[1] * $input_vector->[2] ) - ( $input_bivector->[3] * $input_vector->[3] );
    $return_value_vector->[2] = ( $input_bivector->[2] * $input_vector->[3] ) - ( $input_bivector->[1] * $input_vector->[1] );
    $return_value_vector->[3] = ( $input_bivector->[3] * $input_vector->[1] ) - ( $input_bivector->[2] * $input_vector->[2] );
    return $return_value_vector;
};

our number_arrayref $outer_product__vector_vector_euclidean = sub {
    ( my number_arrayref $input_vector_1, my number_arrayref $input_vector_2 ) = @_;
    if ( ( scalar @{$input_vector_1} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector_1 is not of length 4, croaking');
    }
    if ( ( scalar @{$input_vector_2} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector_2 is not of length 4, croaking');
    }
    my number_arrayref $return_value_bivector = [];
    $return_value_bivector->[1] = ( $input_vector_1->[1] * $input_vector_2->[2] ) - ( $input_vector_1->[2] * $input_vector_2->[1] );
    $return_value_bivector->[2] = ( $input_vector_1->[2] * $input_vector_2->[3] ) - ( $input_vector_1->[3] * $input_vector_2->[2] );
    $return_value_bivector->[3] = ( $input_vector_1->[3] * $input_vector_2->[1] ) - ( $input_vector_1->[1] * $input_vector_2->[3] );
    return $return_value_bivector;
};

our number $outer_product__bivector_vector_euclidean = sub {
    ( my number_arrayref $input_bivector, my number_arrayref $input_vector ) = @_;
    if ( ( scalar @{$input_bivector} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_bivector is not of length 4, croaking');
    }
    if ( ( scalar @{$input_vector} ) != 4 ) {
        croak('ERROR EAVRV10, BOUND-CHECKING MISMATCH: Argument $input_vector is not of length 4, croaking');
    }
    my number $return_value_number;
    $return_value_number
        = ( $input_bivector->[1] * $input_vector->[3] ) + ( $input_bivector->[2] * $input_vector->[1] ) + ( $input_bivector->[3] * $input_vector->[2] );
    return $return_value_number;
};

1;    # end of class
