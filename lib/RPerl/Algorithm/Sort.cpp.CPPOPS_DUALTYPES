// [[[ HEADER ]]]
using std::cout;  using std::cerr;  using std::endl;

#ifndef __CPP__INCLUDED__RPerl__Algorithm__Sort_cpp
#define __CPP__INCLUDED__RPerl__Algorithm__Sort_cpp 0.005_000

// [[[ INCLUDES ]]]
#include "RPerl/Algorithm/Sort.h"  // -> (RPerl.cpp; Algorithm.cpp)

# ifdef __PERL__TYPES

// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]
// [[[<<< BEGIN PERL TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm__Sort::inherited__Sort(SV* person) {
    cout << "in CPPOPS_PERLTYPES Sort->inherited__Sort(), have ::class($self) = " << SvPV_nolen(classname(this)) << " and $person = " << SvPV_nolen(person) << ", FISH\n";
}

SV* RPerl__Algorithm__Sort__uninherited__Sort(SV* person) {
    cout << "in CPPOPS_PERLTYPES Sort::uninherited__Sort(), received $person = " << SvPV_nolen(person) << ", MY\n";
    return newSVpv("Sort::uninherited__Sort() RULES! CPPOPS_PERLTYPES", 0);
}

// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]
// [[[<<< END PERL TYPES >>>]]]

# elif defined __CPP__TYPES

// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]
// [[[<<< BEGIN CPP TYPES >>>]]]

// [[[ SUBROUTINES & OO METHODS ]]]

void RPerl__Algorithm__Sort::inherited__Sort(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Sort->inherited__Sort(), have ::class($self) = " + classname(this) + (const string) " and $person = " + person + (const string) ", FISH" + (const string) "\n");
}

string RPerl__Algorithm__Sort__uninherited__Sort(string person) {
    RPerl__diag((const string) "in CPPOPS_CPPTYPES Sort::uninherited__Sort(), received $person = " + person + (const string) ", MY" + (const string) "\n");
    return (const string) "Sort::uninherited__Sort() RULES! CPPOPS_CPPTYPES";
}

// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]
// [[[<<< END CPP TYPES >>>]]]

# else

Purposefully_die_from_a_compile-time_error,_due_to_neither___PERL__TYPES_nor___CPP__TYPES_being_defined.__We_need_to_define_exactly_one!

# endif

#endif
