//!/usr/bin/rperl





// [[[ HEADER ]]]
#include <rperlstandalone.h>
#ifndef __CPP__INCLUDED__RPerl__Test__Operator06RegularExpressionMatch__program_52_good_cpp
#define __CPP__INCLUDED__RPerl__Test__Operator06RegularExpressionMatch__program_52_good_cpp 0.001_000
# ifdef __CPP__TYPES


int main() {
    // [[[ OPERATIONS HEADER ]]]

// [[[ OPERATIONS ]]]
    string foo = (const string) "howdy hello ahoy how";
    print "have pre-regex  $foo = " << foo << endl;
    integer _fooRC;
    integer bax = ((((foo = regex("ho", "ms").replace(foo, "HO", "g", (regexsize*) &_fooRC)).max_size() * 0) + _fooRC));

    /*
    // PERL W/ VAR
    my string $foo = "SUBJECT";
    my integer $bax = ( $foo =~ s/FIND/REPLACE_WITH/gms );

    // C++ W/ VAR, CURRENT
    string foo = (const string) "SUBJECT";
    integer _fooRC;
    integer bax = ((((foo = regex("FIND", "ms").replace(foo, "REPLACE_WITH", "g", (regexsize*) &_fooRC)).max_size() * 0) + _fooRC));

    // C++ W/ VAR, NEEDED
    string foo = (const string) "SUBJECT";
    integer bax = ((regex("FIND", "ms").preplace(&foo, "REPLACE_WITH", "g"));

    // PERL W/OUT VAR
    my integer $bax = ( "SUBJECT" =~ s/FIND/REPLACE_WITH/gms );

    // C++ W/OUT VAR, NEEDED
    integer bax = ((regex("FIND", "ms").preplace("SUBJECT", "REPLACE_WITH", "g"));
    */
 
    print "have post-regex $foo = " << foo << endl;
    print "have $bax = " << bax << endl;













    // [[[ OPERATIONS FOOTER ]]]
    return 0;
}

// [[[ FOOTER ]]]
# elif defined __PERL__TYPES
Purposefully_die_from_a_compile-time_error,_due_to____PERL__TYPES_being_defined.__We_need_to_define_only___CPP__TYPES_in_this_file!
# endif
#endif
